services:

  caddy:
    build:
      context: .
      dockerfile: Dockerfile-caddy
    container_name: prod-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./Caddyfile:/etc/caddy/Caddyfile"
      - "./../assets/static/:/var/www/"
      - "./caddy/data/:/data/"
      - "./caddy/config/:/config/"
    depends_on:
      - app

  app:
    build:
      context: ./../
      dockerfile: ./build/Dockerfile-app
    container_name: prod-app
    volumes:
      - "./config-prod.yml:/config.yml"
    depends_on:
      - redis
      - imaginary
      - mongo
      - minio

  redis:
    build:
      context: .
      dockerfile: Dockerfile-redis
    container_name: prod-redis
    volumes:
      - "./redis.conf:/usr/local/etc/redis/redis.conf"

  imaginary:
    build:
      context: .
      dockerfile: Dockerfile-imaginary
    container_name: prod-imaginary

  mongo:
    build:
      context: .
      dockerfile: Dockerfile-mongo
    container_name: prod-mongo
    volumes:
      - "./mongo.js:/docker-entrypoint-initdb.d/mongo.js"
    #   - ./mongo/data/db/:/data/db/
    #   - ./mongo/data/configdb/:/data/configdb/

    # WARNING (Windows & OS X): The default Docker setup on Windows and
    # OS X uses a VirtualBox VM to host the Docker daemon. Unfortunately,
    # the mechanism VirtualBox uses to share folders between the host
    # system and the Docker container is not compatible with the memory
    # mapped files used by MongoDB. This means that it is not possible to
    # run a MongoDB container with the data directory mapped to the host.

  minio:
    build:
      context: .
      dockerfile: Dockerfile-minio
    container_name: prod-minio
    volumes:
      - "./minio/data/:/data/"
